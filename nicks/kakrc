source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "whereswaldon/shellcheck.kak"

plug "andreyorst/kaktree" defer kaktree %{
    set-option global kaktree_double_click_duration '0.5'
    set-option global kaktree_dir_icon_open  '‚ñæ üóÅ '
    set-option global kaktree_dir_icon_close '‚ñ∏ üóÄ '
    set-option global kaktree_file_icon      '‚†Ä‚†Äüñ∫'
} config %{
    hook global WinSetOption filetype=kaktree %{
        remove-highlighter buffer/numbers
        remove-highlighter buffer/matching
        remove-highlighter buffer/wrap
        remove-highlighter buffer/show-whitespaces
    }
    kaktree-enable
}

add-highlighter global/ number-lines
add-highlighter global/ wrap

colorscheme tomorrow-night
face global Default default,default
face global LineNumbers default,default+fgd@LineNumbers
face global BufferPadding default,default

eval %sh{kak-lsp --kakoune -s $kak_session}

set global autoreload true
set global tabstop 4
set global indentwidth 0

hook global WinSetOption filetype=(go|c|cpp|java|python|javascript|typescript|rust|nix) %{
	lsp-enable-window
    set-option window lsp_auto_highlight_references true
    set-option window lsp_hover_anchor false
    set-option window lsp_hover_max_lines 10
    lsp-auto-hover-enable
    lsp-inlay-code-lenses-enable window
    echo -debug "Enabling LSP for filetype %opt{filetype}"
}

set global lsp_diagnostic_line_error_sign '‚ïë'
set global lsp_diagnostic_line_warning_sign '‚îä'
map -docstring "lsp mode" global user l ':enter-user-mode lsp<ret>'
map -docstring "lsp rename" global user r ':lsp-rename-prompt<ret>'

hook global KakEnd .* lsp-exit

define-command -override -hidden lsp-show-error -params 1 -docstring "Render error (suppress useless gopls errors)" %{
    evaluate-commands %sh{
        if [ "$1" = "go language server error: 'no object found'" ]; then
            exit 0
        fi
        echo 'echo -debug "kak-lsp:" %arg{1}'
        echo 'info %arg{1}'
    }
}

hook global WinSetOption filetype=go %{
	set-option window lintcmd 'golint'
	set-option window formatcmd 'goimports'
    hook buffer BufWritePre .* %{
	    format
        lint
    }
}

hook global WinSetOption filetype=python %{
    map window insert <s-tab> '<a-;>    '
    map window insert <tab> '<a-;>    '
    set window indentwidth 4
    set-option window formatcmd 'autopep8 -aaa -'
    set-option window lintcmd %{ run() { pylint --msg-template='{path}:{line}:{column}: {category}: {msg_id}: {msg} ({symbol})' "$1" | awk -F: 'BEGIN { OFS=":" } { if (NF == 6) { $3 += 1; print } }'; } && run }
    hook buffer BufWritePre .* %{
	    format
	    lint
	}
}

define-command format-eslint -docstring %{
    Formats the current buffer using eslint.
    Respects your local project setup in eslintrc.
} %{
    evaluate-commands -draft -no-hooks -save-regs '|' %{
        # Select all to format
        execute-keys '%'

        # eslint does a fix-dry-run with a json formatter which results in a JSON output to stdout that includes the fixed file.
        # jq then extracts the fixed file output from the JSON. -j returns the raw output without any escaping.
        set-register '|' %{
            format_out="$(mktemp)"
            cat | \
            npx eslint --format json \
                       --fix-dry-run \
                       --stdin \
                       --stdin-filename "$kak_buffile" | \
            jq -j ".[].output" > "$format_out"
            if [ $? -eq 0 ] && [ $(wc -c < "$format_out") -gt 4 ]; then
                cat "$format_out"
            else
                printf 'eval -client %s %%{ fail eslint formatter returned an error %s }\n' "$kak_client" "$?" | kak -p "$kak_session"
                echo -n "$kak_selection"
            fi
            rm -f "$format_out"
        }

        # Replace all with content from register:
        execute-keys '|<ret>'
    }
}

hook global WinSetOption filetype=(javascript|typescript) %{
    map window insert <s-tab> '<a-;>  '
    map window insert <tab> '<a-;>  '
    set window indentwidth 2
	set window lintcmd %{format-eslint}
    hook buffer BufWritePre .* %{format-eslint}
}

hook global WinSetOption filetype=terraform %{
    set window formatcmd 'terraform fmt -'
    map window insert <s-tab> '<a-;>   '
    map window insert <tab> '<a-;>   '
    set window indentwidth 2
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=sh %{
    set window formatcmd 'shfmt'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=rust %{
    set window formatcmd 'rustfmt --edition 2021'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=html %{
    set window formatcmd 'prettier --parser html'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=nix %{
    set window formatcmd 'nixfmt'
    hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=(c|cpp) %{
    # set window formatcmd 'clang-format --fallback-style=WebKit'
    # hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=yaml %{
    map window insert <s-tab> '<a-;>  '
    map window insert <tab> '<a-;>  '
    set window indentwidth 2
    set window formatcmd 'yq read -d"*" -'
}

hook global WinSetOption filetype=java %{
	map -docstring "println" window user P 'iSystem.out.println("");<esc>'
	map -docstring "printf" window user F 'iSystem.out.printf("");<esc>'

	set window formatcmd 'java -jar /home/aghani/.local/lib/google-java-format-1.9-all-deps.jar -a -'
	hook buffer BufWritePre .* %{format}
}

hook global WinSetOption filetype=latex %{
	hook buffer BufWritePost .* %{
		nop %sh{
			PDF="$(dirname "$kak_buffile")/$(basename "$kak_buffile" .tex).pdf"
			if [ -z "$(ps | grep "evince $PDF")" ]; then
				evince "$PDF" > /dev/null 2>&1 < /dev/null &
			fi
			cd "$(dirname "$kak_buffile")"
			latexmk -pdf &
		}
	}
}

map -docstring "edit .tmux.conf" global user t ':e ~/.tmux.conf<ret>'
map -docstring "edit kakrc" global user e ':e ~/.config/kak/kakrc<ret>'
map -docstring "edit bashrc" global user b ':e ~/.bashrc<ret>'
map -docstring "wl-paste" global user p '!xclip -selection clipboard -o<ret>'
map -docstring "lsp-hover-buffer" global user H ':lsp-hover-buffer<ret>'
map -docstring "lsp-code-actions" global user a ':lsp-code-actions<ret>'

hook global RegisterModified '"' %{ nop %sh{
    printf %s "$kak_main_reg_dquote" | xclip -selection clipboard > /dev/null 2>&1 &
}}

map global normal '#' ':comment-line<ret>'

map -docstring 'split vertically' global user d ':tmux-terminal-horizontal kak -c %val{session}<ret>'
map -docstring 'split horizontally' global user D ':tmux-terminal-vertical kak -c %val{session}<ret>'
map -docstring "kaktree" global user k ':kaktree-toggle<ret>'

map global normal <space> ,
map global normal , <space>
